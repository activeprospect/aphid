# encoding: UTF-8

require 'rubygems'
require 'rake'
require 'rake/packagetask'

ROOT_PATH = File.expand_path(File.dirname(__FILE__))
DEFAULT_TASKS = [ :clean, :build ] #, "docs:build" ]

$WATCHING = false
$FAILED   = false

# Check Vendor Dependencies --------------------------------------------------

unless Dir["Vendor/Aphid/*"].size > 0
  puts "\nYou'll need Aphid to build this project. Simply run:\n\n"
  puts "  $ git submodule init && git submodule update"
  puts "  $ cd Vendor/Aphid && git submodule init && git submodule update"
  puts "\nand you should be all set!\n\n"
  exit
end

begin
  require "less"
rescue LoadError
  puts "\nYou'll need Less to build this project. Simply run:\n\n"
  puts "  $ gem install less"
  puts "\nand you should be all set!\n\n"
  exit
end

begin
  require "sprockets"
rescue LoadError
  puts "\nYou'll need Sprockets to build this project. Simply run:\n\n"
  puts "  $ gem install sprockets"
  puts "\nand you should be all set!\n\n"
  exit
end

begin
  require "ruby-growl"
  $GROWL = Growl.new("localhost", "[Aphid Project]", ["Build Succeeded", "Build Failed"])
rescue LoadError
  # Do nothing...
end

# Default Tasks --------------------------------------------------------------

desc "Defaults to #{DEFAULT_TASKS.inspect}"
task :default => DEFAULT_TASKS

# Clean Task -----------------------------------------------------------------

desc "Clean up the built project"
task :clean do
  header "Cleaning Project"
  rm_rf "#{ROOT_PATH}/Build"
  mkdir "#{ROOT_PATH}/Build"
  puts
end

# Watcher Task ---------------------------------------------------------------

desc "Watches for changes and rebuilds the project and documentation as changes occur"
task :watch do
  begin
    require "filewatcher"
  rescue LoadError
    puts "\nYou'll need FileWatcher to watch for changes. Simply run:\n\n"
    puts "  $ gem install filewatcher"
    puts "\nand you should be all set!\n\n"
    exit
  end
  unless $GROWL
    header "Growl Support Notice"
    puts "To enable Growl notifications during automated builds, you will need to install ruby-growl by running:\n\n"
    puts "  $ gem install ruby-growl"
    puts "\nOnce installed, you must also enable the options \"Listen for incoming notifications\" and \"Allow remote application registration\" in your Growl settings.\n\n"
  end
  $WATCHING = true
  header "Waiting for Change(s)"
  watched_files = Dir["Application/**/*.js"] + Dir["Resources/Stylesheets/**/*.less"]
  FileWatcher.new(watched_files).watch do |filename|
    puts filename + " was changed. Rebuilding project...\n"
    DEFAULT_TASKS.each { |task| Rake::Task[task].reenable }
    DEFAULT_TASKS.each do |task|
      if $FAILED
        puts
        header "Build Failed!"
        break
      end
      Rake::Task[task].invoke
    end
    if $GROWL and $WATCHING and not $FAILED
      $GROWL.notify "Build Succeeded", "[Aphid Project] Build Succeeded",
        "Automated build of [Aphid Project] has completed successfully."
    end
    $FAILED = false
    header "Waiting for Change(s)"
  end
end

# Build Tasks ----------------------------------------------------------------

desc "Build the project"
task :build do
  header "Building [Aphid Project]"
  sprocketize(File.join("Build", "Application.js"), { :source_files => [ "Application/Application.js" ] }) \
  and lessify(File.join("Resources", "Stylesheets", "Application.less"), File.join("Build", "Application.css")) # \
  # and lessify(File.join("Resources", "Stylesheets", "AphidProject.IE7.less"), File.join("Build", "AphidProject.IE7.css")) \
  # and lessify(File.join("Resources", "Stylesheets", "AphidProject.IE8.less"), File.join("Build", "AphidProject.IE8.css")) \
  # and lessify(File.join("Resources", "Stylesheets", "AphidProject.IE9.less"), File.join("Build", "AphidProject.IE9.css"))
  puts
end

# Documentation Tasks --------------------------------------------------------

# desc "Generate and launch the Aphid documentation"
# task :docs => [ "docs:build", "docs:open" ]
# 
# desc "Generate the Aphid documentation"
# task "docs:build" => [ :build, "docs:clean" ] do
#   header "Generating Documentation"
#   PDoc.run({
#     :source_files => "Build/Aphid.Documented.js",
#     :destination => File.join(ROOT_PATH, "Documentation"),
#     :syntax_highlighter => :coderay,
#     :markdown_parser => :maruku,
#     :src_code_href => proc { |obj|
#       "https://github.com/activeprospect/aphid/blob/#{current_head}/#{obj.file}#LID#{obj.line_number}"
#     },
#     :pretty_urls => false,
#     :bust_cache => true,
#     :name => 'Aphid JavaScript Framework',
#     :short_name => 'Aphid',
#     :home_url => 'http://aphid.activeprospect.com/',
#     :doc_url => 'http://aphid.activeprospect.com/api',
#     :version => "0.9.0",
#     :copyright_notice => "Copyright &copy; 2010 ActiveProspect, Inc. All Rights Reserved."
#   })
# end
# 
# desc "Clean up the generated documentation"
# task "docs:clean" do
#   header "Cleaning Project"
#   rm_rf "#{ROOT_PATH}/Documentation"
#   mkdir "#{ROOT_PATH}/Documentation"
#   puts
# end
# 
# desc "Open documentation in the default system browser"
# task "docs:open" do
#   header "Opening Documentation"
#   `open "#{ROOT_PATH}/Documentation/index.html"`
#   puts "open \"#{ROOT_PATH}/Documentation/index.html\"\n\n"
# end

# Test Tasks -----------------------------------------------------------------

# desc "Runs all the JavaScript unit tests and collects the results"
# JavaScriptTestTask.new(:test) do |test|
#   test.mount("/Build")
#   test.mount("/Tests")
#   test.mount("/Vendor")
# 
#   Dir["Tests/**/*Test.html"].each { |test_file| test.run("/#{test_file}") }
# 
#   test.browser(:safari)
# end

# Support Methods ------------------------------------------------------------

def sprocketize(output, options = {})
  sprockets_options = {
    :root         => ROOT_PATH,
    :asset_root   => "Build/Images",
    :load_path    => [ "Application" ],
    :source_files => "Application/**/*.js"
  }.merge(options)
  puts "Sprocketizing #{sprockets_options[:source_files]} to #{output} ..."
  sprockets = Sprockets::Secretary.new(sprockets_options)
  sprockets.concatenation.save_to(output)
  sprockets.install_assets
rescue => e
  $FAILED = true
  if $WATCHING and $GROWL
    # prefix = "An "
    # if e.instance_of? Less::SyntaxError
    #   prefix = "A syntax"
    # end
    $GROWL.notify "Build Failed", "Decision UI Build Failed — Sprocketize",
      "An error occurred while compiling JavaScripts with Sprockets:\n\n#{e.message}\n\nReference the console for more information…"
  end
  puts e
  exit unless $WATCHING
  false
end

def lessify(input, output, options = {})
  puts "Lessifying #{input} to #{output} ..."
  template = File.read(input)
  $LESS_LOAD_PATH = [ "Resources/Stylesheets" ]
  less = Less::Engine.new(template)
  File.open(output, 'w') do |file|
    file.write less.to_css
  end
rescue => e
  $FAILED = true
  if $WATCHING and $GROWL
    prefix = "An "
    if e.instance_of? Less::SyntaxError
      prefix = "A syntax"
    end
    $GROWL.notify "Build Failed", "Decision UI Build Failed — Lessify",
      "#{prefix} error occurred while compiling CSS with Less.\n\nReference the console for more information…"
  end
  puts e
  exit unless $WATCHING
  false
end

def header(message)
  message = " #{message} "
  puts "\n#{message.center(`stty size`.split(' ')[1].to_i, '-')}\n\n"
end

# def current_head
#   `git show-ref --head --hash HEAD`
# end
